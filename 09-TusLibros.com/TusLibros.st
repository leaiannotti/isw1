Object subclass: #Cart	instanceVariableNames: 'items catalog'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Cart commentStamp: '<historical>' prior: 0!Representa un carrito de compras!!Cart methodsFor: 'adding' stamp: 'LeandroIannotti 10/26/2017 20:37'!add: aBook 	self addABook: aBook withQuantity: 1. ! !!Cart methodsFor: 'adding' stamp: 'LeandroIannotti 10/26/2017 20:51'!addABook: aBook withQuantity: aQuantity 	(catalog includes:aBook) ifTrue:[	aQuantity timesRepeat: [items add:aBook]] ifFalse:[self error: Cart errorMessageBookIsNotInTheCatalog].! !!Cart methodsFor: 'adding' stamp: 'LeandroIannotti 10/26/2017 21:18'!isEmpty	^ items size = 0.! !!Cart methodsFor: 'accessing' stamp: 'LeandroIannotti 10/26/2017 20:07'!items	^items.! !!Cart methodsFor: 'accessing' stamp: 'LeandroIannotti 10/26/2017 20:33'!initializeWithCatalog: aCatalog 		items := OrderedCollection new.	catalog := aCatalog.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cart class	instanceVariableNames: ''!!Cart class methodsFor: 'operations' stamp: 'LeandroIannotti 10/26/2017 20:33'!create	|cart|	cart := Cart new.	cart initializeWithCatalog: Set new.	^cart.! !!Cart class methodsFor: 'operations' stamp: 'LeandroIannotti 10/26/2017 20:32'!createWithCatalog: aCatalog	|cart|	cart := Cart new.	cart initializeWithCatalog: aCatalog .	^cart.! !!Cart class methodsFor: 'operations' stamp: 'LeandroIannotti 10/26/2017 20:39'!errorMessageBookIsNotInTheCatalog	^'El libro no se encuentra en el catalogo'! !TestCase subclass: #CartTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 20:49'!test03CanAddMoreThanOneBook	|cart book quantity catalog |	book := 'tuslibros1'.	catalog := Set with:book.	cart := Cart createWithCatalog: catalog.	quantity := 4.	cart addABook: book withQuantity: quantity. 			self assert: (cart items allSatisfy:[:aBook | aBook = book]).	self assert: (cart items size = quantity).! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 21:32'!test04CantAddBookThatIsNotInTheCatalog	| cart book catalog |	catalog := Set with: 'ISBN1'.	cart := Cart createWithCatalog: catalog.	book := 'ISBN2'.	self should: [ cart add: book ] raise: Error - MessageNotUnderstood withExceptionDo: [ :cartError | self assert: cartError messageText = Cart errorMessageBookIsNotInTheCatalog. cart isEmpty. ]! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 20:49'!test02CartHasTheBookAdded	|cart book catalog|	book := 'tuslibros1'.	catalog := Set with: book.	cart := Cart createWithCatalog: catalog.	cart add: book.			self assert: (cart items includes: book).	self assert: (cart items size = 1).! !!CartTest methodsFor: 'tests' stamp: 'MarceloFerranti 10/31/2017 12:09'!test07CanCheckoutWithOneBook	| aCart aCatalog aCreditCard aSalesBook today aCashier |	aCatalog := Set new.	aCatalog add: 'ISBN1'.	aCatalog add: 'ISBN2'.	aCatalog add: 'ISBN3'.	aCatalog add: 'ISBN4'.	aCatalog add: 'ISBN5'.	aCart := Cart createWithCatalog: aCatalog.	aCart addABook: 'ISBN3' withQuantity: 1.	aCreditCard := CreditCard createWithId: '5400000000000001' validTo: (Date year: 2020 month: 07 day: 01) withOwner: 'Pepe'.	aSalesBook := OrderedCollection new.	today := Date today.	aCashier := Cashier		createForCart: aCart		withCreditcard: aCreditCard		withSalesbook: aSalesBook		withDate: today.	aCashier checkout.	self assert: (aCashier salesbook includes: 'ISBN3')! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 21:17'!test01NewCartHasNoItems|cart|cart := Cart create.self assert: cart isEmpty.! !!CartTest methodsFor: 'tests' stamp: 'MarceloFerranti 10/31/2017 12:02'!test06CantCheckoutAEmptyCart	| aCart aCatalog aCreditCard aSalesBook today aCashier |	aCatalog := Set new.	aCatalog add: 'ISBN1'.	aCatalog add: 'ISBN2'.	aCatalog add: 'ISBN3'.	aCatalog add: 'ISBN4'.	aCatalog add: 'ISBN5'.	aCart := Cart createWithCatalog: aCatalog.	aCreditCard := CreditCard createWithId: '5400000000000001' validTo: (Date year: 2011 month: 07 day: 01) withOwner: 'Pepe'.	aSalesBook := OrderedCollection new.	today := Date today.	aCashier := Cashier		createForCart: aCart		withCreditcard: aCreditCard		withSalesbook: aSalesBook		withDate: today.	self		should: [ aCashier checkout ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :cartError | 			self assert: cartError messageText = Cashier errorMessageCantCheckoutWithExpiredCreditcard.			self assert: (aSalesBook isEmpty) ]! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 21:03'!test05ListCartReturnAListOfBooksInTheCart|aCart aCatalog aList|aCatalog := Set new.aCatalog add:'ISBN1'.aCatalog add:'ISBN2'.aCatalog add:'ISBN3'.aCatalog add:'ISBN4'.aCatalog add:'ISBN5'.aCart := Cart createWithCatalog: aCatalog.aCart addABook: 'ISBN1' withQuantity:2. aCart addABook: 'ISBN2' withQuantity:3.aCart addABook: 'ISBN3' withQuantity:1.aList := OrderedCollection new.aList add:'ISBN1'.aList add:'ISBN1'.aList add:'ISBN2'.aList add:'ISBN2'.aList add:'ISBN2'.aList add:'ISBN3'.self assert: (aCart items = aList).! !Object subclass: #Cashier	instanceVariableNames: 'cart creditCard salesbook date'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Cashier commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cart:		<Object>	creditCard:		<Object>	date:		<Object>	salesbook:		<Object>    Implementation Points!!Cashier methodsFor: 'operations' stamp: 'MarceloFerranti 10/31/2017 12:05'!checkout	(creditCard validFor: date)		ifTrue: [ salesbook := cart items ]		ifFalse: [ self error: Cashier errorMessageCantCheckoutWithExpiredCreditcard ]! !!Cashier methodsFor: 'as yet unclassified' stamp: 'MarceloFerranti 10/31/2017 10:34'!inicializeWithCart: aCart withCreditcard: aCreditCard withSalesbook: aSalesbook withDate: aDate	cart := aCart.	creditCard := aCreditCard.	salesbook := aSalesbook.	date := aDate! !!Cashier methodsFor: 'as yet unclassified' stamp: 'MarceloFerranti 10/31/2017 12:09'!salesbook	^salesbook ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cashier class	instanceVariableNames: ''!!Cashier class methodsFor: 'operations' stamp: 'MarceloFerranti 10/31/2017 10:31'!errorMessageCantCheckoutWithExpiredCreditcard 	^ 'La tarjeta de credito se encuentra vencida'! !!Cashier class methodsFor: 'as yet unclassified' stamp: 'MarceloFerranti 10/31/2017 09:55'!createForCart: aCart withCreditcard: aCreditCard withSalesbook: aSalesbook withDate: aDate	| aCashier |	aCashier := self new.	aCashier		inicializeWithCart: aCart		withCreditcard: aCreditCard		withSalesbook: aSalesbook		withDate: aDate.	^aCashier.! !Object subclass: #CreditCard	instanceVariableNames: 'id validTo owner'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!CreditCard commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	id:		<Object>	owner:		<Object>	validTo:		<Object>    Implementation Points!!CreditCard methodsFor: 'as yet unclassified' stamp: 'MarceloFerranti 10/31/2017 10:34'!validFor: aDate^validTo >= aDate.! !!CreditCard methodsFor: 'as yet unclassified' stamp: 'MarceloFerranti 10/30/2017 21:10'!initalizeWithId: aCreditCardNumber validTo: aDate withOwner: aOwner 	id := aCreditCardNumber .	validTo:= aDate.	owner:= aOwner.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CreditCard class	instanceVariableNames: ''!!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MarceloFerranti 10/30/2017 21:08'!createWithId: aCreditCardNumber validTo: aDate withOwner: aOwner	| aCreditCard |	aCreditCard := self new.	aCreditCard initalizeWithId: aCreditCardNumber validTo: aDate withOwner: aOwner.	^aCreditCard.! !