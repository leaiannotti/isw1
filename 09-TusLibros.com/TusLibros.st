Object subclass: #Cart	instanceVariableNames: 'catalogo articulos'	classVariableNames: 'ultimoIdCarrito'	poolDictionaries: ''	category: 'TusLibros'!!Cart methodsFor: 'operaciones' stamp: 'LeandroIannotti 11/6/2017 15:50'!add: unArticulo withQty: unaCantidadDeCopias 	( unaCantidadDeCopias isInteger and: unaCantidadDeCopias > 0) ifFalse: [ self error: 'Sólo se pueden agregar cantidades enteras positivas de artículos.' ].	( catalogo includesKey: unArticulo ) ifFalse: [ self error: 'Sólo se pueden agregar artículos que estén en el catálogo.' ].	articulos add: unArticulo withOccurrences:  unaCantidadDeCopias.	^self.! !!Cart methodsFor: 'observacion' stamp: 'LeandroIannotti 11/6/2017 15:51'!quantityOf: unArticulo	^articulos occurrencesOf:  unArticulo.! !!Cart methodsFor: 'observacion' stamp: 'LeandroIannotti 11/6/2017 15:51'!catalog	^ catalogo copy.! !!Cart methodsFor: 'observacion' stamp: 'LeandroIannotti 11/6/2017 15:51'!itemsSize	 ^articulos size.! !!Cart methodsFor: 'observacion' stamp: 'LeandroIannotti 09/11/2017 20:21'!incluye: unArticulo 	^articulos includes: unArticulo.! !!Cart methodsFor: 'observacion' stamp: 'LeandroIannotti 11/6/2017 15:50'!items	^ articulos copy.! !!Cart methodsFor: 'observacion' stamp: 'LeandroIannotti 09/11/2017 20:14'!initialize	articulos := Bag new.	catalogo := Set new.! !!Cart methodsFor: 'modificacion' stamp: 'LeandroIannotti 11/6/2017 15:50'!catalog: unCatalogo 	catalogo := unCatalogo.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cart class	instanceVariableNames: ''!!Cart class methodsFor: 'creacion' stamp: 'LeandroIannotti 11/6/2017 15:50'!conCatalogo: unCatalogo	| unCarrito |	unCarrito := Cart new.	unCarrito catalog: unCatalogo.	^unCarrito.	! !TestCase subclass: #CartTest	instanceVariableNames: 'catalogo libro1 libro2 libro3 libroFueraDelCatalogo tarjetaNoVencida2 tarjetaNoVencida tarjetaVencida carritoConLibros carritoVacio validadorTarjetaError validadorTarjetaTodoOk errorValidador'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!CartTest methodsFor: 'initialization' stamp: 'LeandroIannotti 11/6/2017 15:54'!setUp	libro1 := 'ISBN1'.	libro2 := 'ISBN2'.	libro3 := 'ISBN3'.			catalogo := Dictionary new.	catalogo at: libro1 put: 10.	catalogo at: libro2 put: 1/5.	catalogo at: libro3 put: 8/5. 		carritoVacio := Cart conCatalogo: catalogo.		carritoConLibros := Cart conCatalogo: catalogo.	carritoConLibros := carritoConLibros add: libro1 withQty: 10.	carritoConLibros := carritoConLibros add: libro2 withQty: 5.			! !!CartTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:51'!test04AgregarVariosLibrosDistintosACarrito	| unCarrito |	unCarrito := Cart conCatalogo: catalogo.	unCarrito add: libro1 withQty: 1.	unCarrito add: libro2 withQty: 1.	unCarrito add: libro3 withQty: 1.			self assert: (unCarrito itemsSize) equals: 3.	self assert: (unCarrito quantityOf: libro1) equals: 1.	self assert: (unCarrito quantityOf: libro2) equals: 1.	self assert: (unCarrito quantityOf: libro3) equals: 1.! !!CartTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:51'!test01CrearCarrito	| unCarrito |	unCarrito := Cart conCatalogo: catalogo.	self assert: (unCarrito catalog) equals: catalogo.	self assert: (unCarrito items size) equals: 0.	! !!CartTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:51'!test05SoloSePuedeAgregarCantidadesEnterasPositivasDeLibros	| unCarrito |	unCarrito := Cart conCatalogo: catalogo.		self should: [ unCarrito add: libro1 withQty: Cart ] raise: Error.	self assert: (unCarrito itemsSize) equals: 0.		self should: [ unCarrito add: libro1 withQty: 1/2 ] raise: Error.	self assert: (unCarrito itemsSize) equals: 0.		self should: [ unCarrito add: libro1 withQty: -10 ] raise: Error.	self assert: (unCarrito itemsSize) equals: 0.		self should: [ unCarrito add: libro1 withQty: 0 ] raise: Error.	self assert: (unCarrito itemsSize) equals: 0.		self shouldnt: [ unCarrito add: libro1 withQty: 1 ] raise: Error.		self assert: (unCarrito itemsSize) equals: 1.! !!CartTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:51'!test06NoSePuedenAgregarLibrosFueraDelCatalogo	| unCarrito |	unCarrito := Cart conCatalogo: catalogo.		self should: [ unCarrito add: libroFueraDelCatalogo withQty: 1 ] raise: Error.	self assert: (unCarrito itemsSize) equals: 0.! !!CartTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:51'!test02AgregarUnaCopiaDeLibroACarrito	| unCarrito |	unCarrito := Cart conCatalogo: catalogo.	unCarrito add: libro1 withQty: 1.			self assert: (unCarrito itemsSize) equals: 1.	self assert: (unCarrito incluye: libro1).! !!CartTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:51'!test03AgregarVariasCopiasDeLibroACarrito	| unCarrito |	unCarrito := Cart conCatalogo: catalogo.	unCarrito add: libro1 withQty: 3.			self assert: (unCarrito itemsSize) equals: 3.	self assert: (unCarrito quantityOf: libro1) equals: 3.! !Object subclass: #Cashier	instanceVariableNames: 'libroDeVentas validadorTarjetas'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Cashier methodsFor: 'creacion' stamp: 'MarceloFerranti 06/11/2017 21:04'!conLibroDeVentas: unLibroDeVentas validadorDeTarjetas: unValidador	libroDeVentas := unLibroDeVentas.	validadorTarjetas := unValidador.! !!Cashier methodsFor: 'checkout' stamp: 'LeandroIannotti 11/6/2017 15:51'!checkout: unCarrito conTarjeta: unaTarjeta	| total venta |		unCarrito itemsSize = 0		ifTrue: [ self error: 'Su carrito está vacío.' ].	(unaTarjeta vencidaAlMes: Date today monthIndex Anio: Date today year)		ifTrue: [ self error: 'Tarjeta Vencida' ].	total := self calcularTotal: unCarrito.	validadorTarjetas validarTarjeta: unaTarjeta.	venta :=  (Sale conArticulos: unCarrito items Tarjeta: unaTarjeta Total: total).		libroDeVentas add: venta.	^ venta! !!Cashier methodsFor: 'checkout' stamp: 'LeandroIannotti 11/6/2017 15:51'!calcularTotal: unCarrito 	 ^(unCarrito items collect: [ :unArticulo | unCarrito catalog at: unArticulo ]) sum.! !!Cashier methodsFor: 'observacion' stamp: 'MarceloFerranti 09/11/2017 01:44'!libroDeVentas	^ libroDeVentas copy.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cashier class	instanceVariableNames: ''!!Cashier class methodsFor: 'creacion' stamp: 'LeandroIannotti 11/6/2017 15:43'!conLibroDeVentas: unLibroDeVentas validadorDeTarjetas: unValidador	^ Cashier new conLibroDeVentas: unLibroDeVentas validadorDeTarjetas: unValidador.! !TestCase subclass: #CashierTest	instanceVariableNames: 'catalogo libro1 libro2 libro3 libroFueraDelCatalogo tarjetaNoVencida2 tarjetaNoVencida tarjetaVencida carritoConLibros carritoVacio validadorTarjetaError validadorTarjetaTodoOk errorValidador'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:50'!test09CajeroCalculaPrecioTotalDeCarritoCorrectamente	| unCarrito unCajero libroDeVentas |	libroDeVentas := Set new.	unCajero := Cashier conLibroDeVentas: libroDeVentas validadorDeTarjetas: validadorTarjetaError .	unCarrito := Cart conCatalogo: catalogo.	unCarrito add: libro1 withQty: 1.	unCarrito add: libro2 withQty: 1.	unCarrito add: libro3 withQty: 1.	self assert: (unCajero calcularTotal: unCarrito) equals: 59 / 5! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:47'!test15IgualdadVentasPorTarjetaYTotal	| unaVenta unaVentaDistintoTotal unaVentaDistintaTarjeta |	unaVenta := Sale conArticulos: (Bag with: libro1 with: libro1 with: libro2) Tarjeta: tarjetaNoVencida Total: 100.	unaVentaDistintoTotal := Sale		conArticulos: (Bag with: libro1 with: libro2 with: libro1)		Tarjeta: tarjetaNoVencida		Total: 140.	unaVentaDistintaTarjeta := Sale		conArticulos: (Bag with: libro2 with: libro2 with: libro1)		Tarjeta: tarjetaNoVencida2		Total: 100.	self deny: unaVenta = unaVentaDistintoTotal.	self deny: unaVenta = unaVentaDistintaTarjeta! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:47'!test14IgualdadVentasPorArticulosYCliente	| unaVenta unaVentaIgual unaVentaDistinta |	unaVenta := Sale conArticulos: (Bag with: libro1 with: libro1 with: libro2) Tarjeta: tarjetaNoVencida Total: 100.	unaVentaIgual := Sale conArticulos: (Bag with: libro1 with: libro2 with: libro1) Tarjeta: tarjetaNoVencida Total: 100.	unaVentaDistinta := Sale conArticulos: (Bag with: libro1 with: libro2) Tarjeta: tarjetaNoVencida Total: 100.	self assert: unaVenta = unaVentaIgual.	self deny: unaVenta = unaVentaDistinta.! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:46'!test11TarjetasRespondenCorrectamenteSobreSuVencimiento		|tarjetaUno tarjetaDos tarjetaTres|		tarjetaUno := CreditCard numero: 1234123412341234 mesVencimiento: 7 anioVencimiento: 2018 titular: 'Jose Basanta'.	tarjetaDos := CreditCard numero: 1234123412341234 mesVencimiento: 3 anioVencimiento: 1918 titular: 'Carlos Bilardo'.	tarjetaTres := CreditCard numero: 1234123412341234 mesVencimiento: 9 anioVencimiento: 3018 titular: 'Pelé'.		self assert: (tarjetaUno vencidaAlMes: 1 Anio: 2017) equals: false.	self assert: (tarjetaUno vencidaAlMes: 12 Anio: 2018) equals: true.	self assert: (tarjetaDos vencidaAlMes: 1 Anio: 1900) equals: false.	self assert: (tarjetaDos vencidaAlMes: 1 Anio: 1973) equals: true.	self assert: (tarjetaTres vencidaAlMes: 1 Anio: 3000) equals: false.	self assert: (tarjetaTres vencidaAlMes: 1 Anio: 6000) equals: true.	! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:50'!test08CajeroNoHaceCheckoutDeCarritoVacioNiSeComunicaConValidador	| unCajero libroDeVentas |	libroDeVentas := Set new.	unCajero := Cashier conLibroDeVentas: libroDeVentas validadorDeTarjetas: validadorTarjetaError .		self should: [ unCajero checkout: carritoVacio conTarjeta: tarjetaNoVencida ] raise: Error.		self		shouldnt: 		[ 			[ unCajero checkout: carritoVacio conTarjeta: tarjetaNoVencida ] on: Error do:				[ :err | (err tag = errorValidador) ifTrue: [ self error ] ]		] 			raise: Error.		self		assert:			(unCajero libroDeVentas includes: (Sale conArticulos: carritoVacio items Tarjeta: tarjetaNoVencida Total: 0))		equals: false! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:43'!test16CajeroNoAnotaVentaSiElMerchantDevuelveError	| venta unCajero libroDeVentas |	errorValidador := 'Tarjeta robada'.	libroDeVentas := Set new.	unCajero := Cashier conLibroDeVentas: libroDeVentas validadorDeTarjetas: validadorTarjetaError.	self should: [venta := unCajero checkout: carritoConLibros conTarjeta: tarjetaNoVencida] raise: Error.		self assert: (unCajero libroDeVentas size) equals: 0.! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:46'!test10TarjetasInvalidasNoSeGeneran		self should: [CreditCard numero: 1234567890 mesVencimiento: 1 anioVencimiento: 2015 titular: 'Marcos Rojo'] raise: Error.	self should: [CreditCard numero: 1234567890123456 mesVencimiento: 0 anioVencimiento: 1015 titular: 'Marcos Rojo'] raise: Error.	self should: [CreditCard numero: 1234567890123456 mesVencimiento: 13 anioVencimiento: 3015 titular: 'Marcos Rojo'] raise: Error.	self should: [CreditCard numero: 1234567890123456 mesVencimiento: 6 anioVencimiento: 40000 titular: 'Marcos Rojo'] raise: Error.	self should: [CreditCard numero: 1234567890123456 mesVencimiento: 6 anioVencimiento: -2015 titular: 'Marcos Rojo'] raise: Error.	self should: [CreditCard numero: 1234567890123456 mesVencimiento: 6 anioVencimiento: 2017 titular: self] raise: Error.		! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:50'!test12CajeroNoHaceCheckoutConTarjetaVencidaNiLlamaAlValidador	| unCajero libroDeVentas |	libroDeVentas := Set new.	unCajero := Cashier conLibroDeVentas: libroDeVentas validadorDeTarjetas: validadorTarjetaError.		self should: [ unCajero checkout: carritoConLibros conTarjeta: tarjetaVencida ] raise: Error.		self		shouldnt: 		[ 			[ unCajero checkout: carritoConLibros conTarjeta: tarjetaVencida ] on: Error do:				[ :err | (err tag = errorValidador) ifTrue: [ self error ] ]		] 			raise: Error.	self assert:			(unCajero libroDeVentas includes: (Sale conArticulos: carritoConLibros items Tarjeta: tarjetaVencida Total: 101))		 equals: false.! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 17:49'!setUp	libro1 := 'ISBN1'.	libro2 := 'ISBN2'.	libro3 := 'ISBN3'.			catalogo := Dictionary new.	catalogo at: libro1 put: 10.	catalogo at: libro2 put: 1/5.	catalogo at: libro3 put: 8/5. 		carritoVacio := Cart conCatalogo: catalogo.		carritoConLibros := Cart conCatalogo: catalogo.	carritoConLibros := carritoConLibros add: libro1 withQty: 10.	carritoConLibros := carritoConLibros add: libro2 withQty: 5.			tarjetaNoVencida := CreditCard numero: 1234123412341234 mesVencimiento: 1 anioVencimiento: 2018 titular: 'Juan Testeo'.	tarjetaNoVencida2 := CreditCard numero: 1234123412341274 mesVencimiento: 4 anioVencimiento: 2017 titular: 'Juan El Testeo'.	tarjetaVencida := CreditCard numero: 1234123412341234 mesVencimiento: 4 anioVencimiento: 2017 titular: 'Mirtha Legrand'.		libroFueraDelCatalogo := 'ISBN50000'.		errorValidador := 'VALIDADOR DE TARJETAS LLAMADO'.	validadorTarjetaError := MockValidator new nuevaRespuestaAOperaciones: [self error: errorValidador].	validadorTarjetaTodoOk := MockValidator new nuevaRespuestaAOperaciones: [true].! !!CashierTest methodsFor: 'testeo' stamp: 'LeandroIannotti 11/6/2017 15:50'!test13CajeroHaceCheckoutYAnotaVenta	| venta unCajero libroDeVentas |	libroDeVentas := Set new.	unCajero := Cashier conLibroDeVentas: libroDeVentas validadorDeTarjetas: validadorTarjetaTodoOk.	venta := unCajero checkout: carritoConLibros conTarjeta: tarjetaNoVencida.		self		assert:			(unCajero libroDeVentas includes: (Sale conArticulos: carritoConLibros items Tarjeta: tarjetaNoVencida Total: 101))		equals: true.	self assert: venta total = 101.	self assert: venta tarjeta = tarjetaNoVencida.	self assert: venta items = carritoConLibros items! !Object subclass: #Clock	instanceVariableNames: 'horaActual'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Clock methodsFor: 'observacion' stamp: 'MarceloFerranti 08/11/2017 20:57'!now	^horaActual.! !!Clock methodsFor: 'observacion' stamp: 'MarceloFerranti 08/11/2017 20:59'!nuevaHora: unaHoraDeAlgunDia	horaActual := unaHoraDeAlgunDia.! !Object subclass: #CreditCard	instanceVariableNames: 'numero titular mesVencimiento anioVencimiento'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!CreditCard methodsFor: 'modificacion' stamp: 'LeandroIannotti 09/11/2017 19:16'!conNumero: unNumeroDeTarjeta mesVencimiento: unMesVencimiento anioVencimiento: unAnioVencimiento titular: unTitular 	numero := unNumeroDeTarjeta.	mesVencimiento := unMesVencimiento.	anioVencimiento := unAnioVencimiento.	titular := unTitular.! !!CreditCard methodsFor: 'testing' stamp: 'MarceloFerranti 05/11/2017 02:00'!= unObjeto	self == unObjeto		ifTrue: [ ^ true ].	self class = unObjeto class		ifFalse: [ ^ false ].	^ ((numero = unObjeto numero) and: (titular = unObjeto titular))	 and: ((mesVencimiento = unObjeto mesVencimiento) and: (anioVencimiento = unObjeto anioVencimiento)).	! !!CreditCard methodsFor: 'testing' stamp: 'LeandroIannotti 09/11/2017 19:53'!vencidaAlMes: unMes Anio: unAnio	^anioVencimiento < unAnio or: (anioVencimiento = unAnio and: mesVencimiento < unMes).! !!CreditCard methodsFor: 'observacion' stamp: 'MarceloFerranti 05/11/2017 02:00'!numero	^ numero! !!CreditCard methodsFor: 'observacion' stamp: 'MarceloFerranti 05/11/2017 02:01'!anioVencimiento	^ anioVencimiento! !!CreditCard methodsFor: 'observacion' stamp: 'MarceloFerranti 05/11/2017 02:01'!mesVencimiento	^ mesVencimiento! !!CreditCard methodsFor: 'observacion' stamp: 'MarceloFerranti 05/11/2017 02:00'!titular	^ titular! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CreditCard class	instanceVariableNames: ''!!CreditCard class methodsFor: 'creacion' stamp: 'LeandroIannotti 11/6/2017 15:46'!numero: unNumeroDeTarjeta mesVencimiento: unMesVencimiento anioVencimiento: unAnioVencimiento titular: unTitular 	(unNumeroDeTarjeta isNumber and: unNumeroDeTarjeta numberOfDigits = 16) ifFalse:[self error: 'Tarjeta inválida'].	(unMesVencimiento > 12 or: unMesVencimiento < 1) ifTrue:[self error: 'Tarjeta inválida'].	(unAnioVencimiento numberOfDigits <= 4 and: unAnioVencimiento > 0) ifFalse:[self error: 'Tarjeta inválida'].	unTitular isString ifFalse:[self error: 'Tarjeta inválida'].	^CreditCard new conNumero: unNumeroDeTarjeta mesVencimiento: unMesVencimiento anioVencimiento: unAnioVencimiento titular: unTitular.! !Object subclass: #InterfazRest	instanceVariableNames: 'catalogo diccUsuarioPerfil siguienteIdCarrito cajero reloj validadorTarjetas diccCarritoSesion'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!InterfazRest methodsFor: 'creacion' stamp: 'MarceloFerranti 09/11/2017 16:19'!initialize	diccCarritoSesion  := Dictionary new.	diccUsuarioPerfil   := Dictionary new.	siguienteIdCarrito  := 1.! !!InterfazRest methodsFor: 'creacion' stamp: 'LeandroIannotti 11/6/2017 15:43'!conCatalogo: unCatalogo perfiles: perfilesUsuarios reloj: unReloj validadorTarjetas: unValidador	reloj := unReloj.	validadorTarjetas := unValidador.	catalogo := unCatalogo.	cajero := Cashier conLibroDeVentas: Set new validadorDeTarjetas: unValidador.	diccUsuarioPerfil  := perfilesUsuarios! !!InterfazRest methodsFor: 'observacion' stamp: 'MarceloFerranti 09/11/2017 17:18'!diccCarritoSesion	^ diccCarritoSesion copy.! !!InterfazRest methodsFor: 'observacion' stamp: 'MarceloFerranti 01/11/2017 01:18'!cajero	^ cajero! !!InterfazRest methodsFor: 'operaciones' stamp: 'MarceloFerranti 09/11/2017 16:19'!validarAccesoCliente: unCliente clave: suClave	(diccUsuarioPerfil includesKey: unCliente) ifFalse: [ ^self error: 'Cliente no registrado.' ].	(((diccUsuarioPerfil at: unCliente) clave) = suClave) ifFalse: [ ^self error: 'Contraseña incorrectos.' ].! !!InterfazRest methodsFor: 'operaciones' stamp: 'LeandroIannotti 11/6/2017 15:43'!crearCarritoDeCliente: unCliente clave: suClave 	| unCarrito suIdAsignado |	self validarAccesoCliente: unCliente clave: suClave.			suIdAsignado := siguienteIdCarrito.	siguienteIdCarrito := siguienteIdCarrito + 1.	unCarrito := Cart conCatalogo: catalogo.		diccCarritoSesion 	at: suIdAsignado 						put: 							(Sesion crearConIdCarrito: suIdAsignado									perfilAsociado: (diccUsuarioPerfil at: unCliente) 									carrito: unCarrito  									ultimaOperacion: (DateAndTime now)).		"diccIdCarrito at: suIdAsignado put: unCarrito.	diccCarritosUsuario at: suIdAsignado put: unCliente.	diccCarritosUltimaOperacion at: suIdAsignado put: (DateAndTime now)."		^suIdAsignado.! !!InterfazRest methodsFor: 'operaciones' stamp: 'MarceloFerranti 09/11/2017 17:22'!validarOperacionSobreCarrito: unIdCarrito	| sesion |	(diccCarritoSesion includesKey: unIdCarrito) ifFalse: [ ^self error: 'No existe un carrito con ese número identificador.' ].	sesion := diccCarritoSesion at: unIdCarrito.	(((reloj now) - (sesion ultimaOperacion)) < (Duration minutes: 30 )) ifFalse: [ ^self error: 'El carrito expiró.' ].	sesion actualizarUltimaOperacion: (reloj now).! !!InterfazRest methodsFor: 'operaciones' stamp: 'LeandroIannotti 11/6/2017 15:46'!checkoutDeCarrito: unIdCarrito conTarjetaNumero: unNumeroTarjeta mesVencimiento: unMes anioVencimiento: unAnio titular: unTitular	| venta sesion |	self validarOperacionSobreCarrito: unIdCarrito.	sesion := (diccCarritoSesion at: unIdCarrito).	venta := cajero		checkout: (sesion carrito)		conTarjeta:			(CreditCard				numero: unNumeroTarjeta				mesVencimiento: unMes				anioVencimiento: unAnio				titular: unTitular).					sesion perfilAsociado registrarVenta: venta.		diccCarritoSesion  removeKey: unIdCarrito.			^venta.! !!InterfazRest methodsFor: 'operaciones' stamp: 'MarceloFerranti 09/11/2017 16:20'!ventasCliente: unIdCliente clave: suClave 	self validarAccesoCliente: unIdCliente clave: suClave.	^(diccUsuarioPerfil at: unIdCliente) ventas.! !!InterfazRest methodsFor: 'operaciones' stamp: 'LeandroIannotti 11/6/2017 15:50'!agregarArticulo: unArticulo cantidad: suCantidad aCarritoNumero: unIdCarrito		self validarOperacionSobreCarrito: unIdCarrito.		((diccCarritoSesion at: unIdCarrito) carrito) add: unArticulo withQty: suCantidad.	^(diccCarritoSesion at: unIdCarrito) carrito. ! !!InterfazRest methodsFor: 'operaciones' stamp: 'LeandroIannotti 11/6/2017 15:50'!articulosDelCarrito: unIdCarrito 	self validarOperacionSobreCarrito: unIdCarrito.	^((diccCarritoSesion at: unIdCarrito) carrito) items.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InterfazRest class	instanceVariableNames: ''!!InterfazRest class methodsFor: 'creacion' stamp: 'MarceloFerranti 09/11/2017 16:14'!conCatalogo: unCatalogo perfiles: perfilesUsuarios reloj: unReloj validadorTarjetas: unValidador	^self new conCatalogo: unCatalogo perfiles: perfilesUsuarios reloj: unReloj validadorTarjetas: unValidador.! !TestCase subclass: #InterfazRestTest	instanceVariableNames: 'relojManual catalogo rest libro1 libro2 libro3 libroFueraDelCatalogo tarjetaValida mockValidadorTarjetas'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 01/6/2017 15:47'!test07SePuedenListarLasVentasAClientesConCorrectaAutentificacionYNoDeOtros	| ventasACliente |	rest crearCarritoDeCliente: 1 clave: 12345.	rest agregarArticulo: libro1 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro2 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro3 cantidad: 1 aCarritoNumero: 1.	rest		checkoutDeCarrito: 1		conTarjetaNumero: tarjetaValida numero		mesVencimiento: tarjetaValida mesVencimiento		anioVencimiento: tarjetaValida anioVencimiento		titular: tarjetaValida titular.	ventasACliente := rest ventasCliente: 1 clave: 12345.	self assert: ventasACliente size equals: 1.	self		assert: ventasACliente asOrderedCollection first		equals: (Sale conArticulos: (Bag with: libro1 with: libro2 with: libro3) Tarjeta: tarjetaValida Total: 59 / 5)! !!InterfazRestTest methodsFor: 'testing' stamp: 'MarceloFerranti 01/11/2017 00:59'!test05SePuedenListarArticulosDeCarritosExistentesYNoDeOtros	| listaArticulos |	rest crearCarritoDeCliente: 1 clave: 12345.	rest agregarArticulo: libro1 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro2 cantidad: 2 aCarritoNumero: 1.	rest agregarArticulo: libro3 cantidad: 3 aCarritoNumero: 1.		self should: [ rest articulosDelCarrito: 2 ] raise: Error.	listaArticulos := rest articulosDelCarrito: 1.	self assert: (listaArticulos occurrencesOf: libro1) equals: 1.	self assert: (listaArticulos occurrencesOf: libro2) equals: 2.	self assert: (listaArticulos occurrencesOf: libro3) equals: 3.! !!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 09/11/2017 00:17'!test09SePuedenAgregarYChequearLibrosEnCarritosNoExpiradosSolamente	| listaArticulos |	rest crearCarritoDeCliente: 1 clave: 12345.	self shouldnt: ( rest agregarArticulo:  libro1 cantidad: 1 aCarritoNumero: 1 ) raise: Error.	relojManual nuevaHora: ((relojManual now) + (Duration minutes: 29)).	self shouldnt: ( rest agregarArticulo:  libro2 cantidad: 1 aCarritoNumero: 1 ) raise: Error.	relojManual nuevaHora: ((relojManual now) + (Duration minutes: 31)).	self should: [ rest agregarArticulo:  libro3 cantidad: 1 aCarritoNumero: 1 ] raise: Error.	self should: [ listaArticulos := rest articulosDelCarrito: 1 ] raise: Error.	relojManual nuevaHora: ((relojManual now) - (Duration minutes: 10)).	self shouldnt: (listaArticulos := rest articulosDelCarrito: 1) raise: Error.	self assert: (listaArticulos size) equals: 2.	self assert: (listaArticulos occurrencesOf: libro1) equals: 1.	self assert: (listaArticulos occurrencesOf: libro2) equals: 1.	self assert: (listaArticulos occurrencesOf: libro3) equals: 0.! !!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 09/11/2017 00:04'!test04SePuedenAgregarLibrosACarritosExistentesYNoAOtros	| listaArticulos |	rest crearCarritoDeCliente: 1 clave: 12345.	self shouldnt: [ rest agregarArticulo:  libro1 cantidad: 1 aCarritoNumero: 1 ] raise: Error.	self should: [ rest agregarArticulo:  libro1 cantidad: 1 aCarritoNumero: 2 ] raise: Error.	self should: [ rest agregarArticulo:  libro1 cantidad: 1 aCarritoNumero: 3 ] raise: Error.		listaArticulos := rest articulosDelCarrito: 1.	self assert: (listaArticulos size) equals: 1.	self assert: (listaArticulos occurrencesOf: libro1) equals: 1.! !!InterfazRestTest methodsFor: 'testing' stamp: 'MarceloFerranti 04/11/2017 23:48'!test01UsuariosIncorrectosNoCreanCarritos	self should: [ rest crearCarritoDeCliente: 0 clave: 12345 ] raise: Error.	self should: [ rest crearCarritoDeCliente: 1 clave: 2345 ] raise: Error.! !!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 11/6/2017 17:49'!setUp		| baseUsuarios |		libro1 := 'ISBN1'.	libro2 := 'ISBN2'.	libro3 := 'ISBN3'.		libroFueraDelCatalogo := 'ISBN666'.		catalogo := Dictionary new.	catalogo at: libro1 put: 10.	catalogo at: libro2 put: 1/5.	catalogo at: libro3 put: 8/5.		baseUsuarios := Dictionary new.	baseUsuarios at: 1 put: (Profile conIdCliente: 1 clave: 12345).	baseUsuarios at: 2 put: (Profile conIdCliente: 2 clave: 2345).	baseUsuarios at: 3 put: (Profile conIdCliente: 3 clave: 345).		tarjetaValida := CreditCard numero: 1234567812345678 mesVencimiento: 10 anioVencimiento: 2018 titular: 'Chespirito'.		mockValidadorTarjetas := MockValidator new.		relojManual := Clock new.	relojManual nuevaHora: (DateAndTime now).		rest := InterfazRest conCatalogo: catalogo perfiles: baseUsuarios reloj: relojManual validadorTarjetas: mockValidadorTarjetas.! !!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 11/6/2017 15:47'!test10SePuedeHacerCheckoutDeCarritosNoExpiradosSolamente	| ventas venta |	rest crearCarritoDeCliente: 1 clave: 12345.	rest agregarArticulo: libro1 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro2 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro3 cantidad: 1 aCarritoNumero: 1.	relojManual nuevaHora: ((relojManual now) + (Duration minutes: 35)).	self		should: [ 			rest				checkoutDeCarrito: 2				conTarjetaNumero: tarjetaValida numero				mesVencimiento: tarjetaValida mesVencimiento				anioVencimiento: tarjetaValida anioVencimiento				titular: tarjetaValida titular ]		raise: Error.	ventas := rest cajero libroDeVentas.	self assert: ventas isEmpty.	relojManual nuevaHora: ((relojManual now) - (Duration minutes: 20)).	self		shouldnt: [ 			rest				checkoutDeCarrito: 1				conTarjetaNumero: tarjetaValida numero				mesVencimiento: tarjetaValida mesVencimiento				anioVencimiento: tarjetaValida anioVencimiento				titular: tarjetaValida titular ]		raise: Error.	ventas := rest cajero libroDeVentas.	self assert: ventas size equals: 1.	venta := ventas asOrderedCollection first.	self assert: venta equals: (Sale conArticulos: (Bag with: libro1 with: libro2 with: libro3) Tarjeta: tarjetaValida Total: 59 / 5)! !!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 09/11/2017 00:04'!test03SePuedenAgregarLibrosDentroDelCatalogoYNoOtros		| listaArticulos |	rest crearCarritoDeCliente: 1 clave: 12345.	self shouldnt: ( rest agregarArticulo:  libro1 cantidad: 1 aCarritoNumero: 1 ) raise: Error.	self shouldnt: ( rest agregarArticulo:  libro2 cantidad: 1 aCarritoNumero: 1 ) raise: Error.	self shouldnt: ( rest agregarArticulo:  libro3 cantidad: 1 aCarritoNumero: 1 ) raise: Error.	self should: [ rest agregarArticulo:  libroFueraDelCatalogo cantidad: 1 aCarritoNumero: 1 ] raise: Error.		listaArticulos := rest articulosDelCarrito: 1.	self assert: (listaArticulos size) equals: 3.	self assert: (listaArticulos occurrencesOf: libro1) equals: 1.	self assert: (listaArticulos occurrencesOf: libro2) equals: 1.	self assert: (listaArticulos occurrencesOf: libro3) equals: 1.! !!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 11/6/2017 15:47'!test06SePuedeHacerCheckoutDeCarritosExistentesYNoDeOtros	| ventas venta |	rest crearCarritoDeCliente: 1 clave: 12345.	rest agregarArticulo: libro1 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro2 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro3 cantidad: 1 aCarritoNumero: 1.	self		should: [ 			rest				checkoutDeCarrito: 2				conTarjetaNumero: tarjetaValida numero				mesVencimiento: tarjetaValida mesVencimiento				anioVencimiento: tarjetaValida anioVencimiento				titular: tarjetaValida titular ]		raise: Error.	ventas := rest cajero libroDeVentas.	self assert: ventas isEmpty.	self assert: (rest ventasCliente: 1 clave: 12345) isEmpty.	self		shouldnt: [ 			rest				checkoutDeCarrito: 1				conTarjetaNumero: tarjetaValida numero				mesVencimiento: tarjetaValida mesVencimiento				anioVencimiento: tarjetaValida anioVencimiento				titular: tarjetaValida titular ]		raise: Error.			ventas := rest cajero libroDeVentas.	self assert: ventas size equals: 1.	self assert: (rest ventasCliente: 1 clave: 12345) size equals: 1.	venta := ventas asOrderedCollection first.	self assert: venta equals: (Sale conArticulos: (Bag with: libro1 with: libro2 with: libro3) Tarjeta: tarjetaValida Total: 59 / 5).	self assert: (rest ventasCliente: 1 clave: 12345) first equals: (Sale conArticulos: (Bag with: libro1 with: libro2 with: libro3) Tarjeta: tarjetaValida Total: 59 / 5).! !!InterfazRestTest methodsFor: 'testing' stamp: 'MarceloFerranti 6/18/2017 23:50'!test02UsuariosValidosCreanCarritosValidos		self assert: (rest crearCarritoDeCliente: 1 clave: 12345) equals: 1.	self assert: (rest crearCarritoDeCliente: 1 clave: 12345) equals: 2.	self assert: (rest crearCarritoDeCliente: 2 clave: 2345) equals: 3.	self assert: (rest crearCarritoDeCliente: 1 clave: 12345) equals: 4.! !!InterfazRestTest methodsFor: 'testing' stamp: 'LeandroIannotti 09/11/2017 02:35'!test08ElCarritoDejaDeExistirLuegoDeHacerCheckout	rest crearCarritoDeCliente: 1 clave: 12345.	rest agregarArticulo: libro1 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro2 cantidad: 1 aCarritoNumero: 1.	rest agregarArticulo: libro3 cantidad: 1 aCarritoNumero: 1.	rest		checkoutDeCarrito: 1		conTarjetaNumero: tarjetaValida numero		mesVencimiento: tarjetaValida mesVencimiento		anioVencimiento: tarjetaValida anioVencimiento		titular: tarjetaValida titular.	self assert: (rest diccCarritoSesion includesKey: 1) equals: false.! !Object subclass: #MockValidator	instanceVariableNames: 'respuestaMock'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!MockValidator methodsFor: 'operaciones' stamp: 'MarceloFerranti 6/21/2017 21:07'!nuevaRespuestaAOperaciones: unaRespuestaAOperaciones	respuestaMock := unaRespuestaAOperaciones.! !!MockValidator methodsFor: 'operaciones' stamp: 'MarceloFerranti 6/22/2017 03:53'!validarTarjeta: unaTarjetaDeCredito 	respuestaMock value.! !Object subclass: #Profile	instanceVariableNames: 'idCliente clave ventas'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Profile methodsFor: 'observacion' stamp: 'MarceloFerranti 09/11/2017 16:24'!clave	^ clave copy.! !!Profile methodsFor: 'observacion' stamp: 'MarceloFerranti 09/11/2017 16:26'!ventas	^ ventas! !!Profile methodsFor: 'creacion' stamp: 'LeandroIannotti 09/11/2017 03:20'!initialize	ventas := OrderedCollection new.! !!Profile methodsFor: 'creacion' stamp: 'LeandroIannotti 09/11/2017 03:19'!idCliente: unIdCliente clave: unaClave	idCliente := unIdCliente.	clave := unaClave.! !!Profile methodsFor: 'operacion' stamp: 'MarceloFerranti 09/11/2017 16:25'!registrarVenta: unaVenta 	ventas add: unaVenta.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Profile class	instanceVariableNames: ''!!Profile class methodsFor: 'creacion' stamp: 'MarceloFerranti 09/11/2017 16:23'!conIdCliente: unIdCliente clave: unaClave	^ self new idCliente: unIdCliente clave: unaClave! !Object subclass: #Sale	instanceVariableNames: 'total articulos tarjeta fecha'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Sale methodsFor: 'creacion' stamp: 'LeandroIannotti 11/6/2017 15:50'!= unObjeto	self == unObjeto		ifTrue: [ ^ true ].	self class = unObjeto class		ifFalse: [ ^ false ].	^ (((total = unObjeto total) and: (articulos = unObjeto items))	 and: ((tarjeta = unObjeto tarjeta) and: (fecha = unObjeto fecha))).	! !!Sale methodsFor: 'creacion' stamp: 'MarceloFerranti 01/11/2017 17:47'!conArticulos: unosArticulos Tarjeta: unaTarjetaDeCredito Total: unTotal	articulos := unosArticulos.	tarjeta := unaTarjetaDeCredito.	total := unTotal.	fecha := Date today.! !!Sale methodsFor: 'creacion' stamp: 'MarceloFerranti 01/11/2017 17:47'!hash	"Answer an integer value that is related to the identity of the receiver."	^ ((total hash) bitXor: (fecha hash)) bitXor: ((tarjeta hash)).! !!Sale methodsFor: 'observacion' stamp: 'MarceloFerranti 05/11/2017 02:01'!fecha	^ fecha! !!Sale methodsFor: 'observacion' stamp: 'MarceloFerranti 01/11/2017 02:12'!cliente	^ cliente! !!Sale methodsFor: 'observacion' stamp: 'MarceloFerranti 05/11/2017 01:56'!total	^ total! !!Sale methodsFor: 'observacion' stamp: 'MarceloFerranti 05/11/2017 01:57'!tarjeta	^ tarjeta copy.! !!Sale methodsFor: 'observacion' stamp: 'LeandroIannotti 11/6/2017 15:50'!items	^ articulos copy.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sale class	instanceVariableNames: ''!!Sale class methodsFor: 'creacion' stamp: 'MarceloFerranti 01/11/2017 17:47'!conArticulos: unosArticulos Tarjeta: unaTarjetaDeCredito Total: unTotal	^ self new conArticulos: unosArticulos Tarjeta: unaTarjetaDeCredito Total: unTotal! !Object subclass: #Sesion	instanceVariableNames: 'idCarrito perfilAsociado carrito ultimaOperacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Sesion methodsFor: 'modificacion' stamp: 'LeandroIannotti 09/11/2017 02:33'!actualizarUltimaOperacion: unaFechayHora	ultimaOperacion := unaFechayHora.! !!Sesion methodsFor: 'creacion' stamp: 'MarceloFerranti 09/11/2017 17:15'!idCarrito: unIdCarrito perfilAsociado: unPerfil carrito: unCarrito ultimaOperacion: unaFechayHora	idCarrito := unIdCarrito.	perfilAsociado := unPerfil.	carrito := unCarrito.	ultimaOperacion := unaFechayHora.! !!Sesion methodsFor: 'observacion' stamp: 'LeandroIannotti 09/11/2017 02:33'!carrito	^ carrito! !!Sesion methodsFor: 'observacion' stamp: 'LeandroIannotti 09/11/2017 02:33'!ultimaOperacion	^ ultimaOperacion! !!Sesion methodsFor: 'observacion' stamp: 'MarceloFerranti 09/11/2017 17:16'!perfilAsociado	^ perfilAsociado ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sesion class	instanceVariableNames: ''!!Sesion class methodsFor: 'creacion' stamp: 'MarceloFerranti 09/11/2017 17:17'!crearConIdCarrito: unIdCarrito perfilAsociado: unPerfil carrito: unCarrito ultimaOperacion: unaFechayHora	^self new idCarrito: unIdCarrito perfilAsociado: unPerfil carrito: unCarrito ultimaOperacion: unaFechayHora.! !