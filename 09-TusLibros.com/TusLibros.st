Object subclass: #Cart	instanceVariableNames: 'items catalog'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Cart commentStamp: '<historical>' prior: 0!Representa un carrito de compras!!Cart methodsFor: 'accessing' stamp: 'LeandroIannotti 10/26/2017 20:07'!items	^items.! !!Cart methodsFor: 'accessing' stamp: 'LeandroIannotti 10/26/2017 20:33'!initializeWithCatalog: aCatalog 		items := OrderedCollection new.	catalog := aCatalog.! !!Cart methodsFor: 'adding' stamp: 'LeandroIannotti 10/26/2017 21:18'!isEmpty	^ items size = 0.! !!Cart methodsFor: 'adding' stamp: 'LeandroIannotti 10/26/2017 20:51'!addABook: aBook withQuantity: aQuantity 	(catalog includes:aBook) ifTrue:[	aQuantity timesRepeat: [items add:aBook]] ifFalse:[self error: Cart errorMessageBookIsNotInTheCatalog].! !!Cart methodsFor: 'adding' stamp: 'LeandroIannotti 10/26/2017 20:37'!add: aBook 	self addABook: aBook withQuantity: 1. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cart class	instanceVariableNames: ''!!Cart class methodsFor: 'operations' stamp: 'LeandroIannotti 10/26/2017 20:33'!create	|cart|	cart := Cart new.	cart initializeWithCatalog: Set new.	^cart.! !!Cart class methodsFor: 'operations' stamp: 'LeandroIannotti 10/26/2017 20:32'!createWithCatalog: aCatalog	|cart|	cart := Cart new.	cart initializeWithCatalog: aCatalog .	^cart.! !!Cart class methodsFor: 'operations' stamp: 'LeandroIannotti 10/26/2017 20:39'!errorMessageBookIsNotInTheCatalog	^'El libro no se encuentra en el catalogo'! !TestCase subclass: #CartTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 20:49'!test03CanAddMoreThanOneBook	|cart book quantity catalog |	book := 'tuslibros1'.	catalog := Set with:book.	cart := Cart createWithCatalog: catalog.	quantity := 4.	cart addABook: book withQuantity: quantity. 			self assert: (cart items allSatisfy:[:aBook | aBook = book]).	self assert: (cart items size = quantity).! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 20:49'!test02CartHasTheBookAdded	|cart book catalog|	book := 'tuslibros1'.	catalog := Set with: book.	cart := Cart createWithCatalog: catalog.	cart add: book.			self assert: (cart items includes: book).	self assert: (cart items size = 1).! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 21:17'!test01NewCartHasNoItems|cart|cart := Cart create.self assert: cart isEmpty.! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 21:32'!test04CantAddBookThatIsNotInTheCatalog	| cart book catalog |	catalog := Set with: 'ISBN1'.	cart := Cart createWithCatalog: catalog.	book := 'ISBN2'.	self should: [ cart add: book ] raise: Error - MessageNotUnderstood withExceptionDo: [ :cartError | self assert: cartError messageText = Cart errorMessageBookIsNotInTheCatalog. cart isEmpty. ]! !!CartTest methodsFor: 'tests' stamp: 'LeandroIannotti 10/26/2017 21:03'!test05ListCartReturnAListOfBooksInTheCart|aCart aCatalog aList|aCatalog := Set new.aCatalog add:'ISBN1'.aCatalog add:'ISBN2'.aCatalog add:'ISBN3'.aCatalog add:'ISBN4'.aCatalog add:'ISBN5'.aCart := Cart createWithCatalog: aCatalog.aCart addABook: 'ISBN1' withQuantity:2. aCart addABook: 'ISBN2' withQuantity:3.aCart addABook: 'ISBN3' withQuantity:1.aList := OrderedCollection new.aList add:'ISBN1'.aList add:'ISBN1'.aList add:'ISBN2'.aList add:'ISBN2'.aList add:'ISBN2'.aList add:'ISBN3'.self assert: (aCart items = aList).! !